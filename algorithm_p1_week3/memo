See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (8 warnings)
PMD:          FAILED (7 warnings)
Checkstyle:   FAILED (0 errors, 5 warnings)

Correctness:  5/41 tests passed
Memory:       1/1 tests passed
Timing:       0/41 tests passed

Aggregate score: 27.32%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.4K Sep 29 12:59 BruteCollinearPoints.java
2.4K Sep 29 12:59 FastCollinearPoints.java
1.8K Sep 29 12:59 Point.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At Point.java:[line 67]
M V EI_EXPOSE_REP EI: Returns a reference to the mutable object stored in the instance variable 'segments', which exposes the internal representation of the class 'BruteCollinearPoints'. Instead, create a defensive copy of the object referenced by 'segments' and return the copy.  At BruteCollinearPoints.java:[line 41]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 20]
H C BC_IMPOSSIBLE_DOWNCAST BC: Impossible downcast from type 'Object[]' to 'LineSegment[]'.  At BruteCollinearPoints.java:[line 62]
M V EI_EXPOSE_REP EI: Returns a reference to the mutable object stored in the instance variable 'segments', which exposes the internal representation of the class 'FastCollinearPoints'. Instead, create a defensive copy of the object referenced by 'segments' and return the copy.  At FastCollinearPoints.java:[line 49]
H C BC_IMPOSSIBLE_DOWNCAST BC: Impossible downcast from type 'Object[]' to 'LineSegment[]'.  At FastCollinearPoints.java:[line 70]
M C UWF_UNWRITTEN_FIELD UwF: The instance (or static) variable 'segSlope' is never initialized; all reads of it will return the default value (0 or null). Check for errors (should it have been initialized?), or remove if useless.  At FastCollinearPoints.java:[line 22]
M C NP_UNWRITTEN_FIELD NP: Dereferences the instance (or static) variable 'segSlope', which appears to be null.  At FastCollinearPoints.java:[line 27]
Warnings generated: 8


================================================================


% pmd .
*-----------------------------------------------------------
BruteCollinearPoints.java:5: The private instance (or static) variable 'segNum' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
BruteCollinearPoints.java:41: Returning 'segments' may expose an internal array. If so, return a defensive copy. [MethodReturnsInternalArray]
FastCollinearPoints.java:7: The private instance (or static) variable 'segNum' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
FastCollinearPoints.java:49: Returning 'segments' may expose an internal array. If so, return a defensive copy. [MethodReturnsInternalArray]
Point.java:6: The private instance (or static) variable 'x' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Point.java:7: The private instance (or static) variable 'y' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Point.java:42: Avoid unused local variables, such as 'slope'. [UnusedLocalVariable]
PMD ends with 7 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BruteCollinearPoints.java:15:30: Do not use the letter 'l' as a local variable name. It is hard to distinguish from the number '1'. [LocalVariableName]
[WARN] BruteCollinearPoints.java:48:14: 'while' is not followed by whitespace. [WhitespaceAfter]
[WARN] FastCollinearPoints.java:13:13: Do not use the letter 'l' as a local variable name. It is hard to distinguish from the number '1'. [LocalVariableName]
[WARN] FastCollinearPoints.java:56:14: 'while' is not followed by whitespace. [WhitespaceAfter]
[WARN] Point.java:70:32: '{' is not preceded with whitespace. [WhitespaceAround]
Checkstyle ends with 0 errors and 5 warnings.

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:155)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

  * filename = equidistant.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:156)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

  * filename = input40.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:157)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

  * filename = input48.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:158)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test2a(TestBruteCollinearPoints.java:164)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:720)

  * filename = horizontal25.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test2a(TestBruteCollinearPoints.java:165)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:720)

==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.horizontalSegments(TestBruteCollinearPoints.java:177)
    TestBruteCollinearPoints.test2b(TestBruteCollinearPoints.java:219)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:723)

    - failed on trial 1 of 500
     4
     18547  3880
     15037  3880
     18329  3880
     12072  3880

  *  5 random horizontal line segments
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.horizontalSegments(TestBruteCollinearPoints.java:177)
    TestBruteCollinearPoints.test2b(TestBruteCollinearPoints.java:220)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:723)

    - failed on trial 1 of 250
     20
      3457 15144
     19587  8407
      6597  4993
      6328  7035
     15401 15144
     15840  7035
      3936 15144
     17118  7327
     16201  7327
      2912  4993
      3918 15144
      6023  8407
      6818  7327
     17000  7035
      6467  8407
      5072  7035
      5998  8407
     12613  4993
      6798  4993
     19493  7327

  * 10 random horizontal line segments
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.horizontalSegments(TestBruteCollinearPoints.java:177)
    TestBruteCollinearPoints.test2b(TestBruteCollinearPoints.java:221)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:723)

    - failed on trial 1 of 50

  * 15 random horizontal line segments
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.horizontalSegments(TestBruteCollinearPoints.java:177)
    TestBruteCollinearPoints.test2b(TestBruteCollinearPoints.java:222)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:723)

    - failed on trial 1 of 5

==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test3a(TestBruteCollinearPoints.java:228)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:726)

  * filename = vertical25.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test3a(TestBruteCollinearPoints.java:229)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:726)

==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.verticalSegments(TestBruteCollinearPoints.java:201)
    TestBruteCollinearPoints.test3b(TestBruteCollinearPoints.java:235)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:729)

    - failed on trial 1 of 500
     4
     17118  5442
     17118  8548
     17118  7602
     17118  3600

  *  5 random vertical line segments
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.verticalSegments(TestBruteCollinearPoints.java:201)
    TestBruteCollinearPoints.test3b(TestBruteCollinearPoints.java:236)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:729)

    - failed on trial 1 of 250
     20
     10931 16188
      5156  8201
     15398 18752
     15398  5079
     14850 15903
     15398 18544
      5156  4292
     14850 11836
      4286  1438
     10931  7542
     14850 10085
     14850 12878
      4286  3817
      4286 13337
      5156  2779
     10931  9958
      5156  8664
     15398  9015
     10931 18708
      4286  7631

  * 10 random vertical line segments
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.verticalSegments(TestBruteCollinearPoints.java:201)
    TestBruteCollinearPoints.test3b(TestBruteCollinearPoints.java:237)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:729)

    - failed on trial 1 of 50

  * 15 random vertical line segments
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.verticalSegments(TestBruteCollinearPoints.java:201)
    TestBruteCollinearPoints.test3b(TestBruteCollinearPoints.java:238)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:729)

    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test4a(TestBruteCollinearPoints.java:244)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:732)

  * filename = random38.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test4a(TestBruteCollinearPoints.java:245)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:732)

==> FAILED

Test 4b: random points with no line segments
  *  5 random points
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.no4CollinearPoints(TestBruteCollinearPoints.java:256)
    TestBruteCollinearPoints.test4b(TestBruteCollinearPoints.java:274)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:735)

    - failed on trial 1 of 500
     5
     13820 13283
     23813 23590
     24626 15503
     17321 13735
     18251 16671

  * 10 random points
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.no4CollinearPoints(TestBruteCollinearPoints.java:256)
    TestBruteCollinearPoints.test4b(TestBruteCollinearPoints.java:275)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:735)

    - failed on trial 1 of 250
     10
     30978 17358
     18987 24953
      3002 29506
      7060 24238
     14414 30578
      3224 28075
     24736 14848
       905 14130
     31445 28531
     11879 28896

  * 20 random points
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.no4CollinearPoints(TestBruteCollinearPoints.java:256)
    TestBruteCollinearPoints.test4b(TestBruteCollinearPoints.java:276)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:735)

    - failed on trial 1 of 100
     20
      5840 15648
      3097 18722
     20372  2206
     10093 32757
       458   380
     24715 15589
     23940 30199
      5170 23805
     16156  5945
      7015 26041
     25437  1043
     25699  2138
     20322 24759
     23355 29002
      7114  3031
     23086 31664
     22440  6845
      3631 32708
     17133  6344
     22186 13978

  * 50 random points
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.no4CollinearPoints(TestBruteCollinearPoints.java:256)
    TestBruteCollinearPoints.test4b(TestBruteCollinearPoints.java:277)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:735)

    - failed on trial 1 of 10

==> FAILED

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test5(TestBruteCollinearPoints.java:283)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:738)

  * filename = input2.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test5(TestBruteCollinearPoints.java:284)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:738)

  * filename = input3.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test5(TestBruteCollinearPoints.java:285)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:738)

==> FAILED

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test6(TestBruteCollinearPoints.java:294)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:741)

  * filename = input40.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test6(TestBruteCollinearPoints.java:295)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:741)

  * filename = input48.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test6(TestBruteCollinearPoints.java:296)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:741)

==> FAILED

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test7(TestBruteCollinearPoints.java:304)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:744)

  * filename = input40.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test7(TestBruteCollinearPoints.java:305)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:744)

  * filename = input48.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test7(TestBruteCollinearPoints.java:306)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:744)


It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.noVerticalOrHorizontalSegments(TestBruteCollinearPoints.java:328)
    TestBruteCollinearPoints.test8(TestBruteCollinearPoints.java:346)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:747)

    - failed on trial 1 of 500
     4
     15754 15600
      3199  6060
     11569 12420
     16033 15812

  *  5 random line segments
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.noVerticalOrHorizontalSegments(TestBruteCollinearPoints.java:328)
    TestBruteCollinearPoints.test8(TestBruteCollinearPoints.java:347)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:747)

    - failed on trial 1 of 250
     20
      8789  3210
     10213  9699
      7095   900
      9957   108
      5719 11095
      9192 11808
     10497 12408
       390  9369
     17105 12147
      6021 11157
     10479 11998
     13390 10187
      7634  1635
     10714  5835
     11999  9759
      9975   518
     12647  9795
      9494 11870
      5217  5875
     13785  9819

  * 10 random line segments
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.noVerticalOrHorizontalSegments(TestBruteCollinearPoints.java:328)
    TestBruteCollinearPoints.test8(TestBruteCollinearPoints.java:348)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:747)

    - failed on trial 1 of 100

  * 15 random line segments
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.noVerticalOrHorizontalSegments(TestBruteCollinearPoints.java:328)
    TestBruteCollinearPoints.test8(TestBruteCollinearPoints.java:349)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:747)

    - failed on trial 1 of 50

==> FAILED

Test 9: random line segments
  *  1 random line segment
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.arbitrarySegments(TestBruteCollinearPoints.java:361)
    TestBruteCollinearPoints.test9(TestBruteCollinearPoints.java:379)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:750)

    - failed on trial 1 of 500
     4
      5854 14490
      4060 14100
      6061 14535
      1714 13590

  *  5 random line segments
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.arbitrarySegments(TestBruteCollinearPoints.java:361)
    TestBruteCollinearPoints.test9(TestBruteCollinearPoints.java:380)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:750)

    - failed on trial 1 of 250
     20
      9641  8838
      7948  5546
      7516  4997
      9599 11874
      7882  8152
      9364 11122
      8697  8486
      7205  6784
     11741  8548
      5393  7254
      6986  7848
     12677  8912
      8722 13612
      8172 10037
      8342 11142
     12893  8996
      5692  2679
      9244 10738
      4540  1215
      9504 11570

  * 10 random line segments
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.arbitrarySegments(TestBruteCollinearPoints.java:361)
    TestBruteCollinearPoints.test9(TestBruteCollinearPoints.java:381)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:750)

    - failed on trial 1 of 100

  * 15 random line segments
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.arbitrarySegments(TestBruteCollinearPoints.java:361)
    TestBruteCollinearPoints.test9(TestBruteCollinearPoints.java:382)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:750)

    - failed on trial 1 of 50

==> FAILED

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testImmutable(TestBruteCollinearPoints.java:429)
    TestBruteCollinearPoints.testImmutable(TestBruteCollinearPoints.java:516)
    TestBruteCollinearPoints.test10(TestBruteCollinearPoints.java:531)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:753)

    - sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);

    - failed on trial 1 of 100

  * equidistant.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testImmutable(TestBruteCollinearPoints.java:429)
    TestBruteCollinearPoints.testImmutable(TestBruteCollinearPoints.java:516)
    TestBruteCollinearPoints.test10(TestBruteCollinearPoints.java:532)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:753)

    - sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);

    - failed on trial 1 of 100

==> FAILED

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testMutateConstructorArgument(TestBruteCollinearPoints.java:545)
    TestBruteCollinearPoints.test11(TestBruteCollinearPoints.java:565)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:756)

  * equidistant.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testMutateConstructorArgument(TestBruteCollinearPoints.java:545)
    TestBruteCollinearPoints.test11(TestBruteCollinearPoints.java:566)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:756)

==> FAILED

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:573)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:604)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = equidistant.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:573)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:605)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = input40.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:573)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:606)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = input48.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:573)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:607)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = horizontal5.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:573)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:608)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = vertical5.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:573)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:609)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = random23.txt
    java.lang.IllegalArgumentException: Duplicate error.

    BruteCollinearPoints.boundarycheck(BruteCollinearPoints.java:54)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:9)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:573)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:610)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

==> FAILED

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     0

  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> FAILED

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 1/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:156)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

  * filename = equidistant.txt
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:157)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

  * filename = input40.txt
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:158)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

  * filename = input48.txt
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:159)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

  * filename = input299.txt
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:160)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test2a(TestFastCollinearPoints.java:166)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:781)

  * filename = horizontal25.txt
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test2a(TestFastCollinearPoints.java:167)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:781)

  * filename = horizontal50.txt
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test2a(TestFastCollinearPoints.java:168)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:781)

  * filename = horizontal75.txt
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test2a(TestFastCollinearPoints.java:169)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:781)

  * filename = horizontal100.txt
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test2a(TestFastCollinearPoints.java:170)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:781)

==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.horizontalSegments(TestFastCollinearPoints.java:182)
    TestFastCollinearPoints.test2b(TestFastCollinearPoints.java:224)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:784)

    - failed on trial 1 of 500
     4
     20648 20205
      9761 20205
      6467 20205
     20973 20205

  *  5 random horizontal line segments
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.horizontalSegments(TestFastCollinearPoints.java:182)
    TestFastCollinearPoints.test2b(TestFastCollinearPoints.java:225)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:784)

    - failed on trial 1 of 250
     20
     11804 10493
      8535 16407
     10892  7405
      6067 11992
      6853  8558
     15433  7405
      2899 11992
      8266 16407
     19843  8558
     13185 16407
      1959  8558
     20631  7405
      7959 10493
     20958 16407
     15779  7405
     10862 11992
      1514 10493
     17639 10493
     18622 11992
     18854  8558

  * 10 random horizontal line segments
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.horizontalSegments(TestFastCollinearPoints.java:182)
    TestFastCollinearPoints.test2b(TestFastCollinearPoints.java:226)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:784)

    - failed on trial 1 of 50

  * 15 random horizontal line segments
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.horizontalSegments(TestFastCollinearPoints.java:182)
    TestFastCollinearPoints.test2b(TestFastCollinearPoints.java:227)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:784)

    - failed on trial 1 of 5

==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:233)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

  * filename = vertical25.txt
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:234)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

  * filename = vertical50.txt
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:235)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

  * filename = vertical75.txt
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:236)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

  * filename = vertical100.txt
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:237)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.verticalSegments(TestFastCollinearPoints.java:206)
    TestFastCollinearPoints.test3b(TestFastCollinearPoints.java:243)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:790)

    - failed on trial 1 of 500
     4
     17147 10949
     17147 19923
     17147  8150
     17147  7288

  *  5 random vertical line segments
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.verticalSegments(TestFastCollinearPoints.java:206)
    TestFastCollinearPoints.test3b(TestFastCollinearPoints.java:244)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:790)

    - failed on trial 1 of 250
     20
     10319 19805
     14739 10054
      9437 19639
     10319 18301
     10319  8497
      9437  7657
     11809 20446
     14739 12254
     10319  4366
     11809 11354
     18744 11196
     11809  7853
     11809  6807
     14739  7632
     14739 15131
      9437 14202
     18744 16510
     18744 12475
     18744  9820
      9437  6563

  * 10 random vertical line segments
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.verticalSegments(TestFastCollinearPoints.java:206)
    TestFastCollinearPoints.test3b(TestFastCollinearPoints.java:245)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:790)

    - failed on trial 1 of 50

  * 15 random vertical line segments
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.verticalSegments(TestFastCollinearPoints.java:206)
    TestFastCollinearPoints.test3b(TestFastCollinearPoints.java:246)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:790)

    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test4a(TestFastCollinearPoints.java:252)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:793)

  * filename = random38.txt
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test4a(TestFastCollinearPoints.java:253)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:793)

  * filename = random91.txt
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test4a(TestFastCollinearPoints.java:254)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:793)

  * filename = random152.txt
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test4a(TestFastCollinearPoints.java:255)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:793)

==> FAILED

Test 4b: random points with no line segments
  *  5 random points
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.no4CollinearPoints(TestFastCollinearPoints.java:266)
    TestFastCollinearPoints.test4b(TestFastCollinearPoints.java:284)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:796)

    - failed on trial 1 of 500
     5
      7476 27455
     20746  9874
      1088 15984
     16153 11112
     24785 16026

  * 10 random points
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.no4CollinearPoints(TestFastCollinearPoints.java:266)
    TestFastCollinearPoints.test4b(TestFastCollinearPoints.java:285)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:796)

    - failed on trial 1 of 250
     10
     17303 21125
      4219 25814
     16452 14334
     12061 29604
      2180 20942
      1215 12074
     16333  7094
     14885 24002
     26233  9947
     30273  6814

  * 20 random points
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.no4CollinearPoints(TestFastCollinearPoints.java:266)
    TestFastCollinearPoints.test4b(TestFastCollinearPoints.java:286)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:796)

    - failed on trial 1 of 100
     20
     21330 28046
     10872 22615
     24516  7267
     11328 31947
       947 25950
     20168 12424
     25713 30099
     11084 11702
     11841 24197
     16131 23700
     14673  8902
     26366 27529
     19681 11409
      5866 28009
      5637 17281
     28429  4664
     15425 25765
     20206 29474
      9538 26122
     21391 10775

  * 50 random points
    java.lang.IllegalArgumentException: Duplicate error.

    FastCollinearPoints.boundarycheck(FastCollinearPoints.java:62)
    FastCollinearPoints.<init>(FastCollinearPoints.java:10)
    TestFastColli

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.